/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Banana.RPC
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SmsSendShortMessageDTO : TBase
  {
    private string _PHONE;
    private string _RESULT;
    private string _CONTACT;
    private string _MODEM_ID;
    private string _PLATE_NUMBER;
    private string _PLATE_COLOR;
    private string _PECCANCY_TYPE;
    private string _TERMINAL_CODE;
    private string _EVENT_CODE;
    private string _FILE_PATH;
    private string _REMARK;
    private string _IMG_INFO;
    private string _ENTITY_ID;
    private string _CREATED_BY;

    /// <summary>
    /// 编号
    /// </summary>
    public string ID { get; set; }

    /// <summary>
    /// 短信分类
    /// </summary>
    public int CATEGORY { get; set; }

    /// <summary>
    /// 状态
    /// </summary>
    public int STATUS { get; set; }

    /// <summary>
    /// 手机号码
    /// </summary>
    public string PHONE
    {
      get
      {
        return _PHONE;
      }
      set
      {
        __isset.PHONE = true;
        this._PHONE = value;
      }
    }

    /// <summary>
    /// 短信内容
    /// </summary>
    public string CONTENT { get; set; }

    /// <summary>
    /// 通知时间
    /// </summary>
    public DateTime2 SENT_AT { get; set; }

    /// <summary>
    /// 短信发送执行结果
    /// </summary>
    public string RESULT
    {
      get
      {
        return _RESULT;
      }
      set
      {
        __isset.RESULT = true;
        this._RESULT = value;
      }
    }

    /// <summary>
    /// 联系人(车主或管理员)
    /// </summary>
    public string CONTACT
    {
      get
      {
        return _CONTACT;
      }
      set
      {
        __isset.CONTACT = true;
        this._CONTACT = value;
      }
    }

    /// <summary>
    /// 短信设备编号
    /// </summary>
    public string MODEM_ID
    {
      get
      {
        return _MODEM_ID;
      }
      set
      {
        __isset.MODEM_ID = true;
        this._MODEM_ID = value;
      }
    }

    /// <summary>
    /// 发送次数
    /// </summary>
    public int SENT_COUNT { get; set; }

    /// <summary>
    /// 车辆号牌
    /// </summary>
    public string PLATE_NUMBER
    {
      get
      {
        return _PLATE_NUMBER;
      }
      set
      {
        __isset.PLATE_NUMBER = true;
        this._PLATE_NUMBER = value;
      }
    }

    /// <summary>
    /// 车辆号牌颜色
    /// </summary>
    public string PLATE_COLOR
    {
      get
      {
        return _PLATE_COLOR;
      }
      set
      {
        __isset.PLATE_COLOR = true;
        this._PLATE_COLOR = value;
      }
    }

    /// <summary>
    /// 违法类型
    /// </summary>
    public string PECCANCY_TYPE
    {
      get
      {
        return _PECCANCY_TYPE;
      }
      set
      {
        __isset.PECCANCY_TYPE = true;
        this._PECCANCY_TYPE = value;
      }
    }

    /// <summary>
    /// 路口设备编号
    /// </summary>
    public string TERMINAL_CODE
    {
      get
      {
        return _TERMINAL_CODE;
      }
      set
      {
        __isset.TERMINAL_CODE = true;
        this._TERMINAL_CODE = value;
      }
    }

    /// <summary>
    /// 事件编号
    /// </summary>
    public string EVENT_CODE
    {
      get
      {
        return _EVENT_CODE;
      }
      set
      {
        __isset.EVENT_CODE = true;
        this._EVENT_CODE = value;
      }
    }

    /// <summary>
    /// 文件路径
    /// </summary>
    public string FILE_PATH
    {
      get
      {
        return _FILE_PATH;
      }
      set
      {
        __isset.FILE_PATH = true;
        this._FILE_PATH = value;
      }
    }

    /// <summary>
    /// 请求时间
    /// </summary>
    public DateTime2 REQUEST_AT { get; set; }

    /// <summary>
    /// 创建时间
    /// </summary>
    public DateTime2 CREATED_AT { get; set; }

    /// <summary>
    /// 备注 接口返回的原始xml
    /// </summary>
    public string REMARK
    {
      get
      {
        return _REMARK;
      }
      set
      {
        __isset.REMARK = true;
        this._REMARK = value;
      }
    }

    /// <summary>
    /// 图片信息 base64字符串
    /// </summary>
    public string IMG_INFO
    {
      get
      {
        return _IMG_INFO;
      }
      set
      {
        __isset.IMG_INFO = true;
        this._IMG_INFO = value;
      }
    }

    /// <summary>
    /// 实体编号 接口返回的内部序列号 serialNumber
    /// </summary>
    public string ENTITY_ID
    {
      get
      {
        return _ENTITY_ID;
      }
      set
      {
        __isset.ENTITY_ID = true;
        this._ENTITY_ID = value;
      }
    }

    /// <summary>
    /// 短信条数 扣除短信条数
    /// </summary>
    public int SMS_COUNT { get; set; }

    /// <summary>
    /// 剩余条数 当前短信剩余条数
    /// </summary>
    public int SURPLUS_COUNT { get; set; }

    /// <summary>
    /// 短信发送提交状态 0:未提交 1:已提交
    /// </summary>
    public bool SEND_STATE { get; set; }

    /// <summary>
    /// 创建者(采集人员)
    /// </summary>
    public string CREATED_BY
    {
      get
      {
        return _CREATED_BY;
      }
      set
      {
        __isset.CREATED_BY = true;
        this._CREATED_BY = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool PHONE;
      public bool RESULT;
      public bool CONTACT;
      public bool MODEM_ID;
      public bool PLATE_NUMBER;
      public bool PLATE_COLOR;
      public bool PECCANCY_TYPE;
      public bool TERMINAL_CODE;
      public bool EVENT_CODE;
      public bool FILE_PATH;
      public bool REMARK;
      public bool IMG_INFO;
      public bool ENTITY_ID;
      public bool CREATED_BY;
    }

    public SmsSendShortMessageDTO() {
    }

    public SmsSendShortMessageDTO(string ID, int CATEGORY, int STATUS, string CONTENT, DateTime2 SENT_AT, int SENT_COUNT, DateTime2 REQUEST_AT, DateTime2 CREATED_AT, int SMS_COUNT, int SURPLUS_COUNT, bool SEND_STATE) : this() {
      this.ID = ID;
      this.CATEGORY = CATEGORY;
      this.STATUS = STATUS;
      this.CONTENT = CONTENT;
      this.SENT_AT = SENT_AT;
      this.SENT_COUNT = SENT_COUNT;
      this.REQUEST_AT = REQUEST_AT;
      this.CREATED_AT = CREATED_AT;
      this.SMS_COUNT = SMS_COUNT;
      this.SURPLUS_COUNT = SURPLUS_COUNT;
      this.SEND_STATE = SEND_STATE;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ID = false;
        bool isset_CATEGORY = false;
        bool isset_STATUS = false;
        bool isset_CONTENT = false;
        bool isset_SENT_AT = false;
        bool isset_SENT_COUNT = false;
        bool isset_REQUEST_AT = false;
        bool isset_CREATED_AT = false;
        bool isset_SMS_COUNT = false;
        bool isset_SURPLUS_COUNT = false;
        bool isset_SEND_STATE = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
                isset_ID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                CATEGORY = iprot.ReadI32();
                isset_CATEGORY = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                STATUS = iprot.ReadI32();
                isset_STATUS = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                PHONE = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CONTENT = iprot.ReadString();
                isset_CONTENT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                SENT_AT = new DateTime2();
                SENT_AT.Read(iprot);
                isset_SENT_AT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                RESULT = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                CONTACT = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                MODEM_ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                SENT_COUNT = iprot.ReadI32();
                isset_SENT_COUNT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                PLATE_NUMBER = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                PLATE_COLOR = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                PECCANCY_TYPE = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                TERMINAL_CODE = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                EVENT_CODE = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                FILE_PATH = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                REQUEST_AT = new DateTime2();
                REQUEST_AT.Read(iprot);
                isset_REQUEST_AT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                CREATED_AT = new DateTime2();
                CREATED_AT.Read(iprot);
                isset_CREATED_AT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                REMARK = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                IMG_INFO = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                ENTITY_ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.I32) {
                SMS_COUNT = iprot.ReadI32();
                isset_SMS_COUNT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.I32) {
                SURPLUS_COUNT = iprot.ReadI32();
                isset_SURPLUS_COUNT = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Bool) {
                SEND_STATE = iprot.ReadBool();
                isset_SEND_STATE = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.String) {
                CREATED_BY = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_CATEGORY)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_STATUS)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_CONTENT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SENT_AT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SENT_COUNT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_REQUEST_AT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_CREATED_AT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SMS_COUNT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SURPLUS_COUNT)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SEND_STATE)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SmsSendShortMessageDTO");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "ID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ID);
        oprot.WriteFieldEnd();
        field.Name = "CATEGORY";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CATEGORY);
        oprot.WriteFieldEnd();
        field.Name = "STATUS";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(STATUS);
        oprot.WriteFieldEnd();
        if (PHONE != null && __isset.PHONE) {
          field.Name = "PHONE";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PHONE);
          oprot.WriteFieldEnd();
        }
        field.Name = "CONTENT";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CONTENT);
        oprot.WriteFieldEnd();
        field.Name = "SENT_AT";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        SENT_AT.Write(oprot);
        oprot.WriteFieldEnd();
        if (RESULT != null && __isset.RESULT) {
          field.Name = "RESULT";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RESULT);
          oprot.WriteFieldEnd();
        }
        if (CONTACT != null && __isset.CONTACT) {
          field.Name = "CONTACT";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CONTACT);
          oprot.WriteFieldEnd();
        }
        if (MODEM_ID != null && __isset.MODEM_ID) {
          field.Name = "MODEM_ID";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MODEM_ID);
          oprot.WriteFieldEnd();
        }
        field.Name = "SENT_COUNT";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SENT_COUNT);
        oprot.WriteFieldEnd();
        if (PLATE_NUMBER != null && __isset.PLATE_NUMBER) {
          field.Name = "PLATE_NUMBER";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PLATE_NUMBER);
          oprot.WriteFieldEnd();
        }
        if (PLATE_COLOR != null && __isset.PLATE_COLOR) {
          field.Name = "PLATE_COLOR";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PLATE_COLOR);
          oprot.WriteFieldEnd();
        }
        if (PECCANCY_TYPE != null && __isset.PECCANCY_TYPE) {
          field.Name = "PECCANCY_TYPE";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PECCANCY_TYPE);
          oprot.WriteFieldEnd();
        }
        if (TERMINAL_CODE != null && __isset.TERMINAL_CODE) {
          field.Name = "TERMINAL_CODE";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TERMINAL_CODE);
          oprot.WriteFieldEnd();
        }
        if (EVENT_CODE != null && __isset.EVENT_CODE) {
          field.Name = "EVENT_CODE";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EVENT_CODE);
          oprot.WriteFieldEnd();
        }
        if (FILE_PATH != null && __isset.FILE_PATH) {
          field.Name = "FILE_PATH";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FILE_PATH);
          oprot.WriteFieldEnd();
        }
        field.Name = "REQUEST_AT";
        field.Type = TType.Struct;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        REQUEST_AT.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "CREATED_AT";
        field.Type = TType.Struct;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        CREATED_AT.Write(oprot);
        oprot.WriteFieldEnd();
        if (REMARK != null && __isset.REMARK) {
          field.Name = "REMARK";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(REMARK);
          oprot.WriteFieldEnd();
        }
        if (IMG_INFO != null && __isset.IMG_INFO) {
          field.Name = "IMG_INFO";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IMG_INFO);
          oprot.WriteFieldEnd();
        }
        if (ENTITY_ID != null && __isset.ENTITY_ID) {
          field.Name = "ENTITY_ID";
          field.Type = TType.String;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ENTITY_ID);
          oprot.WriteFieldEnd();
        }
        field.Name = "SMS_COUNT";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SMS_COUNT);
        oprot.WriteFieldEnd();
        field.Name = "SURPLUS_COUNT";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SURPLUS_COUNT);
        oprot.WriteFieldEnd();
        field.Name = "SEND_STATE";
        field.Type = TType.Bool;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SEND_STATE);
        oprot.WriteFieldEnd();
        if (CREATED_BY != null && __isset.CREATED_BY) {
          field.Name = "CREATED_BY";
          field.Type = TType.String;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CREATED_BY);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SmsSendShortMessageDTO(");
      __sb.Append(", ID: ");
      __sb.Append(ID);
      __sb.Append(", CATEGORY: ");
      __sb.Append(CATEGORY);
      __sb.Append(", STATUS: ");
      __sb.Append(STATUS);
      if (PHONE != null && __isset.PHONE) {
        __sb.Append(", PHONE: ");
        __sb.Append(PHONE);
      }
      __sb.Append(", CONTENT: ");
      __sb.Append(CONTENT);
      __sb.Append(", SENT_AT: ");
      __sb.Append(SENT_AT);
      if (RESULT != null && __isset.RESULT) {
        __sb.Append(", RESULT: ");
        __sb.Append(RESULT);
      }
      if (CONTACT != null && __isset.CONTACT) {
        __sb.Append(", CONTACT: ");
        __sb.Append(CONTACT);
      }
      if (MODEM_ID != null && __isset.MODEM_ID) {
        __sb.Append(", MODEM_ID: ");
        __sb.Append(MODEM_ID);
      }
      __sb.Append(", SENT_COUNT: ");
      __sb.Append(SENT_COUNT);
      if (PLATE_NUMBER != null && __isset.PLATE_NUMBER) {
        __sb.Append(", PLATE_NUMBER: ");
        __sb.Append(PLATE_NUMBER);
      }
      if (PLATE_COLOR != null && __isset.PLATE_COLOR) {
        __sb.Append(", PLATE_COLOR: ");
        __sb.Append(PLATE_COLOR);
      }
      if (PECCANCY_TYPE != null && __isset.PECCANCY_TYPE) {
        __sb.Append(", PECCANCY_TYPE: ");
        __sb.Append(PECCANCY_TYPE);
      }
      if (TERMINAL_CODE != null && __isset.TERMINAL_CODE) {
        __sb.Append(", TERMINAL_CODE: ");
        __sb.Append(TERMINAL_CODE);
      }
      if (EVENT_CODE != null && __isset.EVENT_CODE) {
        __sb.Append(", EVENT_CODE: ");
        __sb.Append(EVENT_CODE);
      }
      if (FILE_PATH != null && __isset.FILE_PATH) {
        __sb.Append(", FILE_PATH: ");
        __sb.Append(FILE_PATH);
      }
      __sb.Append(", REQUEST_AT: ");
      __sb.Append(REQUEST_AT);
      __sb.Append(", CREATED_AT: ");
      __sb.Append(CREATED_AT);
      if (REMARK != null && __isset.REMARK) {
        __sb.Append(", REMARK: ");
        __sb.Append(REMARK);
      }
      if (IMG_INFO != null && __isset.IMG_INFO) {
        __sb.Append(", IMG_INFO: ");
        __sb.Append(IMG_INFO);
      }
      if (ENTITY_ID != null && __isset.ENTITY_ID) {
        __sb.Append(", ENTITY_ID: ");
        __sb.Append(ENTITY_ID);
      }
      __sb.Append(", SMS_COUNT: ");
      __sb.Append(SMS_COUNT);
      __sb.Append(", SURPLUS_COUNT: ");
      __sb.Append(SURPLUS_COUNT);
      __sb.Append(", SEND_STATE: ");
      __sb.Append(SEND_STATE);
      if (CREATED_BY != null && __isset.CREATED_BY) {
        __sb.Append(", CREATED_BY: ");
        __sb.Append(CREATED_BY);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
