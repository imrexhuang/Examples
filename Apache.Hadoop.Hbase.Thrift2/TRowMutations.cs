/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Apache.Hadoop.Hbase.Thrift2
{

  /// <summary>
  /// A TRowMutations object is used to apply a number of Mutations to a single row.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TRowMutations : TBase
  {

    public byte[] Row { get; set; }

    public List<TMutation> Mutations { get; set; }

    public TRowMutations() {
    }

    public TRowMutations(byte[] row, List<TMutation> mutations) : this() {
      this.Row = row;
      this.Mutations = mutations;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_row = false;
        bool isset_mutations = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Row = iprot.ReadBinary();
                isset_row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Mutations = new List<TMutation>();
                  TList _list67 = iprot.ReadListBegin();
                  for( int _i68 = 0; _i68 < _list67.Count; ++_i68)
                  {
                    TMutation _elem69;
                    _elem69 = new TMutation();
                    _elem69.Read(iprot);
                    Mutations.Add(_elem69);
                  }
                  iprot.ReadListEnd();
                }
                isset_mutations = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_row)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Row not set");
        if (!isset_mutations)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Mutations not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TRowMutations");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Row == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Row not set");
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
        if (Mutations == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Mutations not set");
        field.Name = "mutations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Mutations.Count));
          foreach (TMutation _iter70 in Mutations)
          {
            _iter70.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TRowMutations(");
      __sb.Append(", Row: ");
      __sb.Append(Row);
      __sb.Append(", Mutations: ");
      __sb.Append(Mutations);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
